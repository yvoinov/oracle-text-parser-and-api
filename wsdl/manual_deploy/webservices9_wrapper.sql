CREATE OR REPLACE TYPE CTX_API_THES_TAB AS TABLE OF VARCHAR2(30); 
/
show errors
CREATE OR REPLACE TYPE CTX_API_TERM_TAB AS TABLE OF VARCHAR2(256); 
/
show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE JPUB_PLSQL_WRAPPER AS
	-- Declare the conversion functions the PL/SQL type CTX_API.THES_TAB
	FUNCTION PL_TO_SQL0(aPlsqlItem CTX_API.THES_TAB)
 	RETURN CTX_API_THES_TAB;
	FUNCTION SQL_TO_PL0(aSqlItem CTX_API_THES_TAB)
	RETURN CTX_API.THES_TAB;
	-- Declare the conversion functions the PL/SQL type CTX_API.TERM_TAB
	FUNCTION PL_TO_SQL1(aPlsqlItem CTX_API.TERM_TAB)
 	RETURN CTX_API_TERM_TAB;
	FUNCTION SQL_TO_PL1(aSqlItem CTX_API_TERM_TAB)
	RETURN CTX_API.TERM_TAB;
   PROCEDURE CTX_API$THES_LOADED (P_THS_LIST OUT CTX_API_THES_TAB);
   PROCEDURE CTX_API$GET_QUALIFIERS (P_QUALIFIERS OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_THES_NAME VARCHAR2);
   PROCEDURE CTX_API$GET_SYN (P_SYN OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_THES_NAME VARCHAR2);
   PROCEDURE CTX_API$GET_BT (P_BT OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_LEVEL NUMBER,P_THES_NAME VARCHAR2);
   PROCEDURE CTX_API$GET_NT (P_NT OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_LEVEL NUMBER,P_THES_NAME VARCHAR2);
   PROCEDURE CTX_API$GET_RT (P_RT OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_THES_NAME VARCHAR2);
   PROCEDURE CTX_API$GET_NTP (P_NTP OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_LEVEL NUMBER,P_THES_NAME VARCHAR2);
END JPUB_PLSQL_WRAPPER;
/
show errors
CREATE OR REPLACE PACKAGE BODY JPUB_PLSQL_WRAPPER IS
	FUNCTION PL_TO_SQL0(aPlsqlItem CTX_API.THES_TAB)
 	RETURN CTX_API_THES_TAB IS 
	aSqlItem CTX_API_THES_TAB; 
	BEGIN 
		-- initialize the table 
		aSqlItem := CTX_API_THES_TAB();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := aPlsqlItem(I);
		END LOOP; 
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL0(aSqlItem CTX_API_THES_TAB) 
	RETURN CTX_API.THES_TAB IS 
	aPlsqlItem CTX_API.THES_TAB; 
	BEGIN 
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := aSqlItem(I);
		END LOOP; 
		RETURN aPlsqlItem;
	END SQL_TO_PL0;
	FUNCTION PL_TO_SQL1(aPlsqlItem CTX_API.TERM_TAB)
 	RETURN CTX_API_TERM_TAB IS 
	aSqlItem CTX_API_TERM_TAB; 
	BEGIN 
		-- initialize the table 
		aSqlItem := CTX_API_TERM_TAB();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := aPlsqlItem(I);
		END LOOP; 
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL1(aSqlItem CTX_API_TERM_TAB) 
	RETURN CTX_API.TERM_TAB IS 
	aPlsqlItem CTX_API.TERM_TAB; 
	BEGIN 
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := aSqlItem(I);
		END LOOP; 
		RETURN aPlsqlItem;
	END SQL_TO_PL1;

   PROCEDURE CTX_API$THES_LOADED (P_THS_LIST OUT CTX_API_THES_TAB) IS
      P_THS_LIST_ WSDL_OWN.CTX_API.THES_TAB;
   BEGIN
      WSDL_OWN.CTX_API.THES_LOADED(P_THS_LIST_);
      P_THS_LIST := JPUB_PLSQL_WRAPPER.PL_TO_SQL0(P_THS_LIST_);
   END CTX_API$THES_LOADED;

   PROCEDURE CTX_API$GET_QUALIFIERS (P_QUALIFIERS OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_THES_NAME VARCHAR2) IS
      P_QUALIFIERS_ WSDL_OWN.CTX_API.TERM_TAB;
   BEGIN
      WSDL_OWN.CTX_API.GET_QUALIFIERS(P_QUALIFIERS_,P_PHRASE,P_THES_NAME);
      P_QUALIFIERS := JPUB_PLSQL_WRAPPER.PL_TO_SQL1(P_QUALIFIERS_);
   END CTX_API$GET_QUALIFIERS;

   PROCEDURE CTX_API$GET_SYN (P_SYN OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_THES_NAME VARCHAR2) IS
      P_SYN_ WSDL_OWN.CTX_API.TERM_TAB;
   BEGIN
      WSDL_OWN.CTX_API.GET_SYN(P_SYN_,P_PHRASE,P_THES_NAME);
      P_SYN := JPUB_PLSQL_WRAPPER.PL_TO_SQL1(P_SYN_);
   END CTX_API$GET_SYN;

   PROCEDURE CTX_API$GET_BT (P_BT OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_LEVEL NUMBER,P_THES_NAME VARCHAR2) IS
      P_BT_ WSDL_OWN.CTX_API.TERM_TAB;
   BEGIN
      WSDL_OWN.CTX_API.GET_BT(P_BT_,P_PHRASE,P_LEVEL,P_THES_NAME);
      P_BT := JPUB_PLSQL_WRAPPER.PL_TO_SQL1(P_BT_);
   END CTX_API$GET_BT;

   PROCEDURE CTX_API$GET_NT (P_NT OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_LEVEL NUMBER,P_THES_NAME VARCHAR2) IS
      P_NT_ WSDL_OWN.CTX_API.TERM_TAB;
   BEGIN
      WSDL_OWN.CTX_API.GET_NT(P_NT_,P_PHRASE,P_LEVEL,P_THES_NAME);
      P_NT := JPUB_PLSQL_WRAPPER.PL_TO_SQL1(P_NT_);
   END CTX_API$GET_NT;

   PROCEDURE CTX_API$GET_RT (P_RT OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_THES_NAME VARCHAR2) IS
      P_RT_ WSDL_OWN.CTX_API.TERM_TAB;
   BEGIN
      WSDL_OWN.CTX_API.GET_RT(P_RT_,P_PHRASE,P_THES_NAME);
      P_RT := JPUB_PLSQL_WRAPPER.PL_TO_SQL1(P_RT_);
   END CTX_API$GET_RT;

   PROCEDURE CTX_API$GET_NTP (P_NTP OUT CTX_API_TERM_TAB,P_PHRASE VARCHAR2,P_LEVEL NUMBER,P_THES_NAME VARCHAR2) IS
      P_NTP_ WSDL_OWN.CTX_API.TERM_TAB;
   BEGIN
      WSDL_OWN.CTX_API.GET_NTP(P_NTP_,P_PHRASE,P_LEVEL,P_THES_NAME);
      P_NTP := JPUB_PLSQL_WRAPPER.PL_TO_SQL1(P_NTP_);
   END CTX_API$GET_NTP;

END JPUB_PLSQL_WRAPPER;
/
show errors
exit
